{"version":3,"sources":["webpack:///./src/app/msm/scheduler-create/scheduler-create.component.html","webpack:///./src/app/msm/scheduler-create/scheduler-create.component.scss","webpack:///./src/app/msm/scheduler-create/scheduler-create.component.ts","webpack:///./src/app/msm/scheduler-create/scheduler-create.module.ts"],"names":[],"mappings":"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","file":"scheduler-create-scheduler-create-module.b2910b6c802fdab369ea.js","sourcesContent":["module.exports = \"<form #SchedulerForm=\\\"ngForm\\\" novalidate class=\\\"mb-5\\\">\\n  <div class=\\\"row customer-form-content mb-4\\\">\\n    <div class=\\\"form-group col-md-6 col-sm-12\\\">\\n      <label for=\\\"Name\\\">Name <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n      <input type=\\\"text\\\" id=\\\"Name\\\"\\n        class=\\\"form-control\\\"\\n        name=\\\"name\\\"\\n        [(ngModel)]=\\\"scheduler.nameOfSale\\\"\\n        placeholder=\\\"please enter name\\\"\\n        required>\\n    </div>\\n\\n    <div class=\\\"form-group col-md-6 col-sm-12\\\">\\n      <label for=\\\"Name\\\">Customer <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n      <ng-select\\n        [items]=\\\"customers | async\\\"\\n        class=\\\"text-left\\\"\\n        [closeOnSelect]=\\\"true\\\"\\n        [clearable]=\\\"true\\\"\\n        [loading]=\\\"isLoadingCusotmer\\\"\\n        placeholder=\\\"please select customer\\\"\\n        [searchable]=\\\"true\\\"\\n        name=\\\"customer\\\"\\n        [(ngModel)]=\\\"scheduler.customer\\\"\\n        (ngModelChange)=\\\"changeCustomer()\\\"\\n        bindLabel=\\\"customerName\\\"\\n        [typeahead]=\\\"customerInput$\\\"\\n        required>\\n      </ng-select>\\n    </div>\\n\\n    <div class=\\\"form-group col-md-6 col-sm-12\\\">\\n      <label for=\\\"Date\\\">Date <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n      <input type=\\\"text\\\" id=\\\"Date\\\"\\n        class=\\\"form-control\\\"\\n        name=\\\"date\\\"\\n        readonly\\n        placeholder=\\\"please select date\\\"\\n        bsDatepicker\\n        [(bsValue)]=\\\"scheduler.date\\\"\\n        [bsConfig]=\\\"DATEPICKER_CONFIG\\\"\\n        required>\\n    </div>\\n\\n    <div class=\\\"form-group col-md-6 col-sm-12\\\">\\n      <label for=\\\"TimeStart\\\">Time Start <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <!-- <app-time-picker\\n        [(ngModel)]=\\\"scheduler.time_start\\\"\\n        name=\\\"time_start\\\"\\n        required></app-time-picker> -->\\n\\n        <input type=\\\"text\\\"\\n          id=\\\"TimeStart\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': TimeStart.dirty && TimeStart.errors }\\\"\\n          [(ngModel)]=\\\"scheduler.time_start\\\"\\n          placeholder=\\\"please enter start time\\\"\\n          name=\\\"time_start\\\"\\n          required\\n          appTimeValidator\\n          #TimeStart=\\\"ngModel\\\">\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"TimeStart.errors?.required\\\">\\n          Please enter time start\\n        </div>\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"TimeStart.errors?.appTimeValidator\\\">\\n          The time start format is incorrect\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group col-md-6 col-sm-12\\\">\\n      <label for=\\\"Name\\\">Time End <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <!-- <app-time-picker\\n          [(ngModel)]=\\\"scheduler.time_end\\\"\\n          name=\\\"time_end\\\"\\n          required></app-time-picker> -->\\n\\n        <input type=\\\"text\\\"\\n          id=\\\"EndTime\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': EndTime.dirty && EndTime.errors }\\\"\\n          [(ngModel)]=\\\"scheduler.time_end\\\"\\n          placeholder=\\\"please enter end time\\\"\\n          name=\\\"time_end\\\"\\n          required\\n          appTimeValidator\\n          #EndTime=\\\"ngModel\\\">\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"EndTime.errors?.required\\\">\\n          Please enter time end\\n        </div>\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"EndTime.errors?.appTimeValidator\\\">\\n          The time end format is incorrect\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group col-md-6 col-sm-12\\\">\\n      <label for=\\\"Name\\\">Staff <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n      <ng-select\\n        [items]=\\\"staffs\\\"\\n        class=\\\"text-left\\\"\\n        [closeOnSelect]=\\\"true\\\"\\n        [clearable]=\\\"true\\\"\\n        [loading]=\\\"isLoadingStaff\\\"\\n        placeholder=\\\"please select staff\\\"\\n        [searchable]=\\\"true\\\"\\n        name=\\\"assignedStaff\\\"\\n        [(ngModel)]=\\\"scheduler.assignedStaff\\\"\\n        bindLabel=\\\"code_full_name\\\"\\n        required>\\n      </ng-select>\\n    </div>\\n\\n    <div class=\\\"form-group col-md-6 col-sm-12\\\">\\n      <label for=\\\"Name\\\">Activity Type</label>\\n      <ng-select\\n        [items]=\\\"typeOfContacts\\\"\\n        class=\\\"text-left\\\"\\n        [closeOnSelect]=\\\"true\\\"\\n        [clearable]=\\\"true\\\"\\n        [loading]=\\\"isLoadingTypeOfContact\\\"\\n        placeholder=\\\"please select activity type\\\"\\n        [searchable]=\\\"false\\\"\\n        name=\\\"typeOfContacts\\\"\\n        [(ngModel)]=\\\"scheduler.actionOfSale\\\"\\n        bindLabel=\\\"name\\\">\\n      </ng-select>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary\\\"\\n        (click)=\\\"createScheduler(SchedulerForm)\\\"\\n        [disabled]=\\\"isLoading || SchedulerForm.form.invalid || !scheduler.endAfterStart\\\">\\n        Create\\n        <i *ngIf=\\\"isLoading\\\" class=\\\"fa fa-refresh fa-spin\\\"></i>\\n      </button>\\n    </div>\\n  </div>\\n</form>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { DATEPICKER_CONFIG } from 'constants/datepicker-config';\nimport { CustomerSaleActivity } from 'models/customer-sale-activity';\nimport { Customer } from 'models/customer';\nimport { CustomerService } from 'shared/services/customer.service';\nimport { NotifyService } from 'shared/utils/notify.service';\nimport { Subject } from 'rxjs/Subject';\nimport { concat } from 'rxjs/internal/observable/concat';\nimport { of } from 'rxjs/internal/observable/of';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, debounceTime, switchMap, tap, catchError } from 'rxjs/operators';\nimport { CustomerSaleActivityService } from 'shared/services/customer-sale-activity.service';\nimport { EventEmitterService } from 'shared/utils/event-emitter.service';\nimport { EMITTER_TYPE } from 'constants/emitter';\nimport { ActionOfSale } from 'constants/action-of-sale';\nimport { CustomerClassification } from 'models/customer-classification';\nimport { CustomerClassificationService } from 'shared/services/customer-classification.service';\nimport { User } from 'models/user';\nimport { UserService } from 'shared/services/user.service';\nimport { NgForm } from '@angular/forms';\nimport { RoleService } from 'app/role.service';\n\n@Component({\n  selector: 'app-scheduler-create',\n  templateUrl: './scheduler-create.component.html',\n  styleUrls: ['./scheduler-create.component.scss'],\n})\nexport class SchedulerCreateComponent implements OnInit {\n  public DATEPICKER_CONFIG = DATEPICKER_CONFIG;\n\n  public scheduler: CustomerSaleActivity = new CustomerSaleActivity();\n\n  public staffs: User[] = [];\n  public isLoadingStaff = false;\n  public isLoadingCusotmer = false;\n  public customerInput$ = new Subject<string>();\n  public isLoading = false;\n\n  // customer\n  public customers: Observable<Customer[]> = of([]);\n  public actionOfSales = ActionOfSale;\n\n  // type of contact\n  public isLoadingTypeOfContact = false;\n  public typeOfContacts: CustomerClassification[] = [];\n\n  constructor(\n    private _customerSv: CustomerService,\n    private _notify: NotifyService,\n    private _customerSaleActivitySv: CustomerSaleActivityService,\n    private _emitter: EventEmitterService,\n    private _customerClassificationSv: CustomerClassificationService,\n    private _userSv: UserService,\n    private _role: RoleService,\n  ) {}\n\n  ngOnInit() {\n    this.scheduler.assignedStaff = null;\n    this.scheduler.customer = null;\n    this.scheduler.actionOfSale = null;\n\n    this._initSearchCustomers();\n    this._typeOfContact();\n    this._getStaffs();\n  }\n\n  private _getStaffs(opts: any = {}) {\n    this.isLoadingStaff = true;\n\n    this._userSv.getAllUsersInBranch(opts).subscribe(\n      (res) => {\n        this.staffs = res;\n        const index = this.staffs.findIndex(\n          (item) => this.scheduler.assignedStaff && item.id === this.scheduler.assignedStaff.id,\n        );\n\n        if (index < 0) {\n          this.scheduler.assignedStaff = null;\n        }\n\n        this.isLoadingStaff = false;\n      },\n      (errors) => {\n        this.isLoadingStaff = false;\n        this._notify.error(errors);\n      },\n    );\n  }\n\n  private _typeOfContact() {\n    this.isLoadingTypeOfContact = true;\n\n    const params = {\n      type: 'contact',\n    };\n    this.typeOfContacts = [];\n\n    this._customerClassificationSv.getCustomerClassification(params).subscribe(\n      (res) => {\n        this.isLoadingTypeOfContact = false;\n        this.typeOfContacts = res.customerClassifications;\n      },\n      (errors) => {\n        this.isLoadingTypeOfContact = false;\n        this._notify.error(errors);\n      },\n    );\n  }\n\n  public createScheduler(form: NgForm) {\n    if (!this.scheduler.endAfterStart) {\n      this._notify.error('please select end time after start time');\n      return;\n    }\n\n    this.isLoading = true;\n\n    this._customerSaleActivitySv.createSaleActivities(this.scheduler.toJSON()).subscribe(\n      (res) => {\n        form.form.markAsPristine({ onlySelf: false });\n        this.isLoading = false;\n        this._emitter.publishData({\n          type: EMITTER_TYPE.CREATE_SALE_ACTIVITY,\n        });\n        this._notify.success(`create sale activity success`);\n      },\n      (errors) => {\n        this.isLoading = false;\n        this._notify.error(errors);\n      },\n      () => {\n        setTimeout(() => {\n          this.scheduler = new CustomerSaleActivity();\n          this.scheduler.assignedStaff = null;\n          this.scheduler.customer = null;\n          this.scheduler.actionOfSale = null;\n        }, 0);\n      },\n    );\n  }\n\n  private _initSearchCustomers() {\n    this._customerSv\n      .filterCustomers({\n        page: 0,\n        size: 100,\n        sort: 'asc',\n        column: 'id',\n      })\n      .subscribe((res) => {\n        this._searchCustomers(res.customerList);\n      });\n  }\n\n  private _searchCustomers(customers: Customer[]) {\n    this.customers = concat(\n      of(customers), // default items\n      this.customerInput$.pipe(\n        debounceTime(200),\n        distinctUntilChanged(),\n        tap(() => (this.isLoadingCusotmer = true)),\n        switchMap((term) =>\n          this._customerSv\n            .filterCustomers({\n              page: 0,\n              size: 100,\n              sort: 'asc',\n              column: 'id',\n              txtSearch: term || '',\n            })\n            .map((res) => res.customerList)\n            .pipe(\n              catchError(() => of([])), // empty list on error\n              tap(() => (this.isLoadingCusotmer = false)),\n            ),\n        ),\n      ),\n    );\n  }\n\n  public changeCustomer() {\n    if (!this._role.is_admin) {\n      return;\n    }\n    const opts: any = {};\n    if (this.scheduler.customer) {\n      opts.branchId = this.scheduler.customer.assignedBranchId;\n    }\n    this._getStaffs(opts);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SchedulerCreateComponent } from './scheduler-create.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TimePickerModule } from 'shared/time-picker/time-picker.module';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { CustomerClassificationService } from 'shared/services/customer-classification.service';\nimport { StaffService } from 'shared/services/staff.service';\nimport { UserService } from 'shared/services/user.service';\nimport { TimeValidatorModule } from 'shared/validators/time-validator/time-validator.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SchedulerCreateComponent,\n  },\n];\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(routes),\n    BsDatepickerModule.forRoot(),\n    TimePickerModule,\n    NgSelectModule,\n    TimeValidatorModule,\n  ],\n  declarations: [SchedulerCreateComponent],\n  providers: [CustomerClassificationService, StaffService, UserService],\n})\nexport class SchedulerCreateModule {}\n"],"sourceRoot":""}