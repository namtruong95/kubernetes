{"version":3,"sources":["webpack:///./src/app/timeline/timeline-create/timeline-create.component.html","webpack:///./src/app/timeline/timeline-create/timeline-create.component.scss","webpack:///./src/app/timeline/timeline-create/timeline-create.component.ts","webpack:///./src/app/timeline/timeline-create/timeline-create.module.ts","webpack:///./src/models/sale-activity.ts","webpack:///./src/shared/services/customer-classification.service.ts"],"names":[],"mappings":"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","file":"timeline-create-timeline-create-module.a7da75ab51d07fa99a37.js","sourcesContent":["module.exports = \"<form #SaleActivityForm=\\\"ngForm\\\" novalidate>\\n  <div class=\\\"row mb-4 customer-form-content\\\">\\n    <div class=\\\"col-lg-6 col-md-12 form-group\\\">\\n      <label>Customer <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n      <ng-select\\n        [items]=\\\"customers | async\\\"\\n        class=\\\"text-left\\\"\\n        [closeOnSelect]=\\\"true\\\"\\n        [clearable]=\\\"true\\\"\\n        [loading]=\\\"isLoadingCusotmer\\\"\\n        placeholder=\\\"please select customer\\\"\\n        [searchable]=\\\"true\\\"\\n        name=\\\"customer\\\"\\n        [(ngModel)]=\\\"saleActivity.customer\\\"\\n        (ngModelChange)=\\\"changeCustomer()\\\"\\n        bindLabel=\\\"customerName\\\"\\n        [typeahead]=\\\"customerInput$\\\"\\n        required>\\n      </ng-select>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12 form-group\\\">\\n      <label for=\\\"Name\\\">Staff</label>\\n      <ng-select\\n        [items]=\\\"staffs\\\"\\n        class=\\\"text-left\\\"\\n        [closeOnSelect]=\\\"true\\\"\\n        [clearable]=\\\"true\\\"\\n        [loading]=\\\"isLoadingStaff\\\"\\n        placeholder=\\\"please select staff\\\"\\n        [searchable]=\\\"false\\\"\\n        name=\\\"assignedStaff\\\"\\n        [(ngModel)]=\\\"saleActivity.assignedStaff\\\"\\n        bindLabel=\\\"code_full_name\\\">\\n      </ng-select>\\n    </div>\\n\\n    <!-- <div class=\\\"col-lg-6 col-md-12 form-group\\\">\\n      <label for=\\\"Department\\\">Department</label>\\n      <input type=\\\"text\\\" id=\\\"Department\\\"\\n        autocomplete=\\\"new-department\\\"\\n        class=\\\"form-control\\\"\\n        name=\\\"department\\\"\\n        placeholder=\\\"please enter department\\\"\\n        [(ngModel)]=\\\"saleActivity.department\\\">\\n    </div> -->\\n\\n    <div class=\\\"col-lg-6 col-md-12 form-group\\\">\\n      <label for=\\\"typeOfContact\\\">Activity Type</label>\\n      <ng-select\\n        [items]=\\\"statusOfProcesses\\\"\\n        class=\\\"text-left\\\"\\n        [closeOnSelect]=\\\"true\\\"\\n        [clearable]=\\\"true\\\"\\n        [loading]=\\\"isLoadingstatusOfProcess\\\"\\n        placeholder=\\\"please select activity type\\\"\\n        [searchable]=\\\"false\\\"\\n        name=\\\"statusOfProcess\\\"\\n        [(ngModel)]=\\\"saleActivity.statusOfProcess\\\"\\n        bindLabel=\\\"name\\\">\\n      </ng-select>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12 form-group\\\">\\n      <label for=\\\"SaleDate\\\">Sale Date</label>\\n      <input type=\\\"text\\\" id=\\\"SaleDate\\\"\\n        autocomplete=\\\"new-SaleDate\\\"\\n        readonly\\n        placeholder=\\\"please select sale date\\\"\\n        class=\\\"form-control\\\"\\n        name=\\\"saleDate\\\"\\n        bsDatepicker\\n        [(ngModel)]=\\\"saleActivity.dateBinding\\\"\\n        [bsConfig]=\\\"DATEPICKER_CONFIG\\\"\\n        (bsValueChange)=\\\"onValueChange($event)\\\">\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12 form-group\\\">\\n      <label for=\\\"Note\\\">Note</label>\\n      <textarea name=\\\"note\\\"\\n        class=\\\"form-control\\\"\\n        id=\\\"Note\\\"\\n        rows=\\\"5\\\"\\n        autocomplete=\\\"new-note\\\"\\n        placeholder=\\\"please enter note\\\"\\n        [(ngModel)]=\\\"saleActivity.note\\\"></textarea>\\n    </div>\\n\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\"\\n      (click)=\\\"createSaleActivity(SaleActivityForm)\\\"\\n      [disabled]=\\\"isLoading || SaleActivityForm.form.invalid\\\">\\n      Create\\n      <i *ngIf=\\\"isLoading\\\" class=\\\"fa fa-refresh fa-spin\\\"></i>\\n    </button>\\n  </div>\\n</form>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { SaleActivity } from 'models/sale-activity';\nimport { Observable } from 'rxjs/Observable';\nimport { Customer } from 'models/customer';\nimport { of } from 'rxjs/internal/observable/of';\nimport { concat } from 'rxjs/internal/observable/concat';\nimport { debounceTime } from 'rxjs/internal/operators/debounceTime';\nimport { distinctUntilChanged } from 'rxjs/internal/operators/distinctUntilChanged';\nimport { tap } from 'rxjs/internal/operators/tap';\nimport { switchMap } from 'rxjs/internal/operators/switchMap';\nimport { catchError } from 'rxjs/internal/operators/catchError';\nimport { CustomerService } from 'shared/services/customer.service';\nimport { Subject } from 'rxjs/Subject';\nimport { User } from 'models/user';\nimport { UserService } from 'shared/services/user.service';\nimport { NotifyService } from 'shared/utils/notify.service';\nimport { CustomerClassification } from 'models/customer-classification';\nimport { CustomerClassificationService } from 'shared/services/customer-classification.service';\nimport { DATEPICKER_CONFIG } from 'constants/datepicker-config';\nimport { SaleActivityService } from 'shared/services/sale-activity.service';\nimport { EMITTER_TYPE } from 'constants/emitter';\nimport { EventEmitterService } from 'shared/utils/event-emitter.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\nimport { RoleService } from 'app/role.service';\n\n@Component({\n  selector: 'app-timeline-create',\n  templateUrl: './timeline-create.component.html',\n  styleUrls: ['./timeline-create.component.scss'],\n})\nexport class TimelineCreateComponent implements OnInit {\n  public isLoading = false;\n\n  public saleActivity: SaleActivity = new SaleActivity();\n\n  public customers: Observable<Customer[]> = of([]);\n  public customerInput$ = new Subject<string>();\n  public isLoadingCusotmer = false;\n\n  public staffs: User[] = [];\n  public isLoadingStaff = false;\n\n  // type of contact\n  public isLoadingstatusOfProcess = false;\n  public statusOfProcesses: CustomerClassification[] = [];\n\n  public DATEPICKER_CONFIG = DATEPICKER_CONFIG;\n\n  constructor(\n    private _customerSv: CustomerService,\n    private _userSv: UserService,\n    private _notify: NotifyService,\n    private _customerClassificationSv: CustomerClassificationService,\n    private _saleActivitySv: SaleActivityService,\n    private _emitter: EventEmitterService,\n    private _route: ActivatedRoute,\n    private _router: Router,\n    private _role: RoleService,\n  ) {}\n\n  ngOnInit() {\n    this._getStaffs();\n    this._statusOfProcess();\n\n    this._route.queryParams.subscribe((params) => {\n      if (params.customerId && !isNaN(+params.customerId)) {\n        this._showCustomer(+params.customerId);\n        this._router.navigate(['/cim/timeline/create'], { replaceUrl: true });\n        return;\n      }\n\n      this._initSearchCustomers();\n    });\n  }\n\n  private _initSearchCustomers() {\n    this._customerSv\n      .filterCustomers({\n        page: 0,\n        size: 100,\n        sort: 'asc',\n        column: 'id',\n      })\n      .subscribe((res) => {\n        this._searchCustomers(res.customerList);\n      });\n  }\n\n  private _showCustomer(id: number) {\n    this._customerSv.showCustomer(id).subscribe((res) => {\n      if (res) {\n        this.saleActivity.customer = res;\n        this._searchCustomers([res]);\n      }\n    });\n  }\n\n  private _searchCustomers(data?: Customer[]) {\n    this.customers = concat(\n      of(data || []), // default items\n      this.customerInput$.pipe(\n        debounceTime(200),\n        distinctUntilChanged(),\n        tap(() => (this.isLoadingCusotmer = true)),\n        switchMap((term) =>\n          this._customerSv\n            .filterCustomers({\n              page: 0,\n              size: 100,\n              sort: 'asc',\n              column: 'id',\n              txtSearch: term || '',\n            })\n            .map((res) => res.customerList)\n            .pipe(\n              catchError(() => of([])), // empty list on error\n              tap(() => (this.isLoadingCusotmer = false)),\n            ),\n        ),\n      ),\n    );\n  }\n\n  private _getStaffs(opts: any = {}) {\n    this.isLoadingStaff = true;\n\n    this._userSv.getAllUsers(opts).subscribe(\n      (res) => {\n        this.staffs = res;\n\n        const index = this.staffs.findIndex(\n          (item) => this.saleActivity.assignedStaff && item.id === this.saleActivity.assignedStaff.id,\n        );\n\n        if (index < 0) {\n          this.saleActivity.assignedStaff = null;\n        }\n        this.isLoadingStaff = false;\n      },\n      (errors) => {\n        this.isLoadingStaff = false;\n        this._notify.error(errors);\n      },\n    );\n  }\n\n  public onValueChange(event) {\n    this.saleActivity.saleDate = event;\n  }\n\n  private _statusOfProcess() {\n    this.isLoadingstatusOfProcess = true;\n\n    const params = {\n      type: 'contact',\n    };\n    this.statusOfProcesses = [];\n\n    this._customerClassificationSv.getCustomerClassification(params).subscribe(\n      (res) => {\n        this.isLoadingstatusOfProcess = false;\n        this.statusOfProcesses = res.customerClassifications;\n      },\n      (errors) => {\n        this.isLoadingstatusOfProcess = false;\n        this._notify.error(errors);\n      },\n    );\n  }\n\n  public createSaleActivity(form: NgForm) {\n    this.isLoading = true;\n\n    this._saleActivitySv.createSaleActivity(this.saleActivity.toJSON()).subscribe(\n      (res) => {\n        this._notify.success(res.meta.message);\n        this._emitter.publishData({\n          type: EMITTER_TYPE.CREATE_SALE_ACTIVITY_2,\n        });\n        this.isLoading = false;\n        form.form.markAsPristine({ onlySelf: false });\n      },\n      (errors) => {\n        this._notify.error(errors);\n        this.isLoading = false;\n      },\n      () => {\n        setTimeout(() => {\n          this.saleActivity = new SaleActivity();\n        }, 0);\n      },\n    );\n  }\n\n  public changeCustomer() {\n    if (!this._role.is_admin) {\n      return;\n    }\n    const opts: any = {};\n    if (this.saleActivity.customer) {\n      opts.branchId = this.saleActivity.customer.assignedBranchId;\n    }\n    this._getStaffs(opts);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TimelineCreateComponent } from './timeline-create.component';\n\nimport { Routes, RouterModule } from '@angular/router';\nimport { CustomerService } from 'shared/services/customer.service';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormsModule } from '@angular/forms';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { SaleActivityService } from 'shared/services/sale-activity.service';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TimelineCreateComponent,\n  },\n];\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes), NgSelectModule, FormsModule, BsDatepickerModule.forRoot()],\n  declarations: [TimelineCreateComponent],\n  providers: [CustomerService, SaleActivityService],\n})\nexport class TimelineCreateModule {}\n","import { Customer } from './customer';\nimport { User } from './user';\nimport { CustomerClassification } from './customer-classification';\n\nimport * as moment from 'moment';\nimport { BaseModelInterface, BaseModel } from './base.model';\nimport { Deserializable } from 'shared/interfaces/deserializable';\n\nexport enum StatusOfProcess {\n  SENT_MAIL = 'Sent Mail',\n  CALL = 'Call',\n  MEETING_WITH_CUSTOMER = 'Meeting with customer',\n  MADE_AND_SEND_QUOTATION = 'Made and sent quotation',\n  NEGOTIATION = 'Negotiation',\n  SIGNED_CONTRACT = 'Signed contract',\n}\n\ninterface SaleActivityInterface extends BaseModelInterface {\n  statusOfProcess: CustomerClassification;\n  note: string;\n  dateBinding: Date;\n  saleDate: any;\n  customerId: number;\n  customer: Customer;\n  assignedStaffId: number;\n  assignedStaff: User;\n}\nexport class SaleActivity extends BaseModel implements Deserializable<SaleActivity> {\n  customerId: number;\n  customer: Customer;\n  public get customer_name(): string {\n    return this.customer ? this.customer.customerName : '';\n  }\n\n  assignedStaffId: number;\n  assignedStaff: User;\n  public get staff_user_name(): string {\n    return this.assignedStaff ? this.assignedStaff.userName : '';\n  }\n  public get staff_full_name(): string {\n    return this.assignedStaff ? this.assignedStaff.fullName : '';\n  }\n\n  statusOfProcess: CustomerClassification;\n  public get statusOfProcessName(): string {\n    return this.statusOfProcess ? this.statusOfProcess.name : '';\n  }\n  public get statusOfProcessIcon(): string {\n    if (!this.statusOfProcess || !this.statusOfProcess.name) {\n      return;\n    }\n\n    switch (this.statusOfProcess.name) {\n      case StatusOfProcess.CALL:\n        return `fa fa-phone-square`;\n      case StatusOfProcess.MADE_AND_SEND_QUOTATION:\n        return `fa fa-th-list`;\n      case StatusOfProcess.MEETING_WITH_CUSTOMER:\n        return `fa fa-comments`;\n      case StatusOfProcess.NEGOTIATION:\n        return `fa fa-thumbs-up`;\n      case StatusOfProcess.SENT_MAIL:\n        return `fa fa-envelope`;\n      case StatusOfProcess.SIGNED_CONTRACT:\n        return `fa fa-check-square`;\n    }\n  }\n  public get statusOfProcessColor(): string {\n    if (!this.statusOfProcess || !this.statusOfProcess.name) {\n      return;\n    }\n\n    switch (this.statusOfProcess.name) {\n      case StatusOfProcess.CALL:\n        return `primary`;\n      case StatusOfProcess.MADE_AND_SEND_QUOTATION:\n        return `success`;\n      case StatusOfProcess.MEETING_WITH_CUSTOMER:\n        return `warning`;\n      case StatusOfProcess.NEGOTIATION:\n        return `danger`;\n      case StatusOfProcess.SENT_MAIL:\n        return `info`;\n      case StatusOfProcess.SIGNED_CONTRACT:\n        return `info`;\n    }\n  }\n\n  note: string;\n\n  saleDate: any;\n  public get date_str(): string {\n    return moment(this.saleDate).toISOString();\n  }\n  public get dateDisplay(): string {\n    return moment(this.saleDate).format('YYYY-MM-DD');\n  }\n\n  dateBinding: Date;\n\n  constructor() {\n    super();\n    this.dateBinding = new Date();\n  }\n\n  deserialize(input: Partial<SaleActivityInterface>): SaleActivity {\n    if (!input) {\n      return;\n    }\n\n    super.deserialize(input);\n    Object.assign(this, input);\n\n    this.dateBinding = input.saleDate instanceof Date ? input.saleDate : new Date(input.saleDate);\n\n    this.customer = input.customer instanceof Customer ? input.customer : new Customer().deserialize(input.customer);\n\n    this.assignedStaff =\n      input.assignedStaff instanceof User ? input.assignedStaff : new User().deserialize(input.assignedStaff);\n\n    this.statusOfProcess =\n      input.statusOfProcess instanceof CustomerClassification\n        ? input.statusOfProcess\n        : new CustomerClassification().deserialize(input.statusOfProcess);\n\n    return this;\n  }\n\n  public toJSON() {\n    return {\n      customerId: this.customer ? this.customer.id : null,\n      assignedStaffId: this.assignedStaff ? this.assignedStaff.id : null,\n      statusOfProcessId: this.statusOfProcess ? this.statusOfProcess.id : null,\n      note: this.note || null,\n      saleDate: this.date_str,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { CustomerClassification } from 'models/customer-classification';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerClassificationService {\n  constructor(private _api: ApiService) {}\n\n  public getCustomerClassification(params: any) {\n    return this._api.get(`customer-classifications`, params).map((res) => {\n      res.data.customerClassifications = res.data.customerClassifications.map((item) =>\n        new CustomerClassification().deserialize(item),\n      );\n      return res.data;\n    });\n  }\n}\n"],"sourceRoot":""}