{"version":3,"sources":["webpack:///./src/app/user/user-create/user-create.component.html","webpack:///./src/app/user/user-create/user-create.component.scss","webpack:///./src/app/user/user-create/user-create.component.ts","webpack:///./src/app/user/user-create/user-create.module.ts","webpack:///./src/constants/emitter.ts","webpack:///./src/models/branch.ts","webpack:///./src/models/district.ts","webpack:///./src/models/township.ts","webpack:///./src/shared/services/branch.service.ts"],"names":[],"mappings":"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","file":"user-create-user-create-module.745d5a3b7c56a7f21aee.js","sourcesContent":["module.exports = \"<form #User=\\\"ngForm\\\" novalidate>\\n  <div class=\\\"row mb-4 customer-form-content\\\">\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"userName\\\">User Name <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <input type=\\\"text\\\" id=\\\"userName\\\"\\n          autocomplete=\\\"new-userName\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': UserName.dirty && UserName.errors }\\\"\\n          name=\\\"userName\\\"\\n          placeholder=\\\"please enter user name\\\"\\n          [(ngModel)]=\\\"user.userName\\\"\\n          #UserName=\\\"ngModel\\\"\\n          required\\n          [pattern]=\\\"rules.userName\\\">\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"UserName.errors?.required\\\">\\n          Please enter user name\\n        </div>\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"UserName.errors?.pattern\\\">\\n          Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"fullName\\\">Full Name <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <input type=\\\"text\\\" id=\\\"fullName\\\"\\n          autocomplete=\\\"new-fullName\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': FullName.dirty && FullName.errors }\\\"\\n          name=\\\"fullName\\\"\\n          placeholder=\\\"please enter full name\\\"\\n          [(ngModel)]=\\\"user.fullName\\\"\\n          #FullName=\\\"ngModel\\\"\\n          required>\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"FullName.errors?.required\\\">\\n          Please enter full name\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"role\\\">Branch <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <ng-select\\n          [items]=\\\"branches\\\"\\n          class=\\\"text-left\\\"\\n          [closeOnSelect]=\\\"true\\\"\\n          [clearable]=\\\"true\\\"\\n          [loading]=\\\"isLoadingBranch\\\"\\n          placeholder=\\\"please select branch\\\"\\n          [searchable]=\\\"false\\\"\\n          name=\\\"branches\\\"\\n          [(ngModel)]=\\\"user.branchId\\\"\\n          #Branch=\\\"ngModel\\\"\\n          bindLabel=\\\"name\\\"\\n          bindValue=\\\"id\\\"\\n          required>\\n        </ng-select>\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"Branch.errors?.required\\\">\\n          Please select branch\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"Password\\\">Password <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <input type=\\\"password\\\" id=\\\"Password\\\"\\n          autocomplete=\\\"new-Password\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': Password.dirty && Password.errors }\\\"\\n          name=\\\"password\\\"\\n          placeholder=\\\"please enter user name\\\"\\n          [(ngModel)]=\\\"user.password\\\"\\n          #Password=\\\"ngModel\\\"\\n          required>\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"Password.errors?.required\\\">\\n          Please enter password\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"role\\\">Role <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <ng-select\\n          [items]=\\\"ROLES\\\"\\n          class=\\\"text-left\\\"\\n          [closeOnSelect]=\\\"true\\\"\\n          [clearable]=\\\"true\\\"\\n          [loading]=\\\"false\\\"\\n          placeholder=\\\"please select role\\\"\\n          [searchable]=\\\"false\\\"\\n          name=\\\"role\\\"\\n          [(ngModel)]=\\\"user.role\\\"\\n          #Role=\\\"ngModel\\\"\\n          bindLabel=\\\"label\\\"\\n          bindValue=\\\"value\\\"\\n          required>\\n        </ng-select>\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"Role.errors?.required\\\">\\n          Please select role\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"Email\\\">Email</label>\\n        <input type=\\\"text\\\" id=\\\"Email\\\"\\n          autocomplete=\\\"new-email\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': Email.dirty && Email.errors }\\\"\\n          name=\\\"email\\\"\\n          placeholder=\\\"please enter email\\\"\\n          [(ngModel)]=\\\"user.email\\\"\\n          #Email=\\\"ngModel\\\"\\n          [pattern]=\\\"rules.email\\\">\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"Email.errors?.pattern\\\">\\n          The email address format is incorrect\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"phone\\\">Phone</label>\\n        <input type=\\\"text\\\" id=\\\"phone\\\"\\n          autocomplete=\\\"new-phone\\\"\\n          class=\\\"form-control\\\"\\n          name=\\\"phone\\\"\\n          placeholder=\\\"please enter phone\\\"\\n          [(ngModel)]=\\\"user.phone\\\">\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\"\\n      (click)=\\\"checkAndCreateUser(User);\\\"\\n      [disabled]=\\\"isLoading || User.form.invalid\\\">\\n      Create\\n      <i *ngIf=\\\"isLoading\\\" class=\\\"fa fa-refresh fa-spin\\\"></i>\\n    </button>\\n  </div>\\n</form>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { User } from 'models/user';\nimport { ROLES } from 'app/guard/roles';\nimport { RegExp } from 'constants/reg-exp';\nimport { UserService } from 'shared/services/user.service';\nimport { NotifyService } from 'shared/utils/notify.service';\nimport { EventEmitterService } from 'shared/utils/event-emitter.service';\nimport { EMITTER_TYPE } from 'constants/emitter';\nimport { NgForm } from '@angular/forms';\nimport { BranchService } from 'shared/services/branch.service';\nimport { Branch } from 'models/branch';\n\n@Component({\n  selector: 'app-user-create',\n  templateUrl: './user-create.component.html',\n  styleUrls: ['./user-create.component.scss'],\n})\nexport class UserCreateComponent implements OnInit {\n  public user: User = new User();\n  public ROLES = ROLES;\n  public rules = RegExp;\n  public isLoading = false;\n\n  // branches\n  public branches: Branch[] = [];\n  public isLoadingBranch = false;\n\n  constructor(\n    private _notify: NotifyService,\n    private _emitter: EventEmitterService,\n    private _userSv: UserService,\n    private _branchSv: BranchService,\n  ) {}\n\n  ngOnInit() {\n    this._getBranchList();\n  }\n\n  private _getBranchList() {\n    this.isLoadingBranch = true;\n    this._branchSv.getBranchList().subscribe(\n      (res) => {\n        this.branches = res.branches;\n        this.isLoadingBranch = false;\n      },\n      (errors) => {\n        this.isLoadingBranch = false;\n        this._notify.error(errors);\n      },\n    );\n  }\n\n  public checkAndCreateUser(form: NgForm) {\n    this._createUser(form);\n\n    // this.isLoading = true;\n    // this._userSv.kcCreateUser(this.user.kcToJSON()).subscribe(\n    //   (res) => {\n    //     this._createUser(form);\n    //   },\n    //   (errors) => {\n    //     this.isLoading = false;\n    //     this._notify.error(errors);\n    //   },\n    // );\n  }\n\n  private _createUser(form: NgForm) {\n    this._userSv.createUser(this.user.toJSON()).subscribe(\n      (res) => {\n        this._notify.success(res.meta.message);\n        this._emitter.publishData({\n          type: EMITTER_TYPE.CREATE_USER,\n        });\n        this.isLoading = false;\n        form.form.markAsPristine({ onlySelf: false });\n      },\n      (errors) => {\n        this.isLoading = false;\n        this._notify.error(errors);\n      },\n      () => {\n        setTimeout(() => {\n          this.user = new User();\n        }, 0);\n      },\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserCreateComponent } from './user-create.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { UserService } from 'shared/services/user.service';\nimport { BranchService } from 'shared/services/branch.service';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserCreateComponent,\n  },\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes), FormsModule, NgSelectModule],\n  declarations: [UserCreateComponent],\n  providers: [UserService, BranchService],\n})\nexport class UserCreateModule {}\n","export const EMITTER_TYPE = {\n  FILTER_CUSTOMER: 'customer:filter',\n  CREATE_CUSTOMER: 'customer:create',\n  GMAP_CLICK: 'gmap:click',\n  CREATE_SALE_ACTIVITY: 'saleActivity:create',\n  FILTER_SALE_ACTIVITY: 'saleActivity:filter',\n  REMOVE_SALE_ACTIVITY: 'saleActivity:remove',\n  UPDATE_SALE_ACTIVITY: 'saleActivity:update',\n  FILTER_POLICY: 'policy:filter',\n  CREATE_POLICY: 'policy:create',\n  CREATE_BTS: 'bts:create',\n  FILTER_BTS: 'bts:filter',\n  GMAP_DISTANCE: 'gmap:distance',\n  GMAP_BTS: 'gmap:bts',\n  GMAP_BTS_CREATE: 'gmap:bts:create',\n  FILTER_CARE_ACTIVITY: 'careActivity:filter',\n  CREATE_CARE_ACTIVITY: 'careActivity:create',\n  CREATE_QUOTATION: 'quotation:create',\n  CHANGE_CUSTOMER_QUOTATION: 'quotation:changeCustomer',\n  FILTER_QUOTATION: 'quotation:filter',\n  FILTER_PROPOSAL: 'proposal:filter',\n  FILTER_DASHBOARD: 'dashboard:filter',\n  CREATE_USER: 'user:create',\n  CREATE_SALE_ACTIVITY_2: 'saleActivity2:create',\n  FILTER_SALE_ACTIVITY_2: 'saleActivity2:filter',\n  CHANGE_FOLDER: 'folder:change',\n  GMAP_PLACE_CHANGED: 'gmap:place:changed',\n  GMAP_ZOOM_TO: 'gmap:zoomTp',\n};\n","import { BaseModelInterface, BaseModel } from './base.model';\nimport { Deserializable } from 'shared/interfaces/deserializable';\n\ninterface BranchInterface extends BaseModelInterface {\n  name: string;\n}\nexport class Branch extends BaseModel implements Deserializable<Branch> {\n  name: string;\n\n  constructor() {\n    super();\n  }\n\n  deserialize(input: Partial<BranchInterface>): Branch {\n    if (!input) {\n      return;\n    }\n    super.deserialize(input);\n    Object.assign(this, input);\n    return this;\n  }\n}\n","import { BaseModelInterface, BaseModel } from './base.model';\nimport { Deserializable } from 'shared/interfaces/deserializable';\n\ninterface DistrictInterface extends BaseModelInterface {\n  name: string;\n  branchId: number;\n}\nexport class District extends BaseModel implements Deserializable<District> {\n  name: string;\n  branchId: number;\n\n  constructor() {\n    super();\n  }\n\n  deserialize(input: Partial<DistrictInterface>): District {\n    if (!input) {\n      return;\n    }\n\n    super.deserialize(input);\n    Object.assign(this, input);\n    return this;\n  }\n}\n","import { BaseModelInterface, BaseModel } from './base.model';\nimport { Deserializable } from 'shared/interfaces/deserializable';\n\ninterface TownshipInterface extends BaseModelInterface {\n  name: string;\n  branchId: number;\n  districtId: number;\n}\nexport class Township extends BaseModel implements Deserializable<Township> {\n  name: string;\n  branchId: number;\n  districtId: number;\n\n  constructor() {\n    super();\n  }\n\n  deserialize(input: Partial<TownshipInterface>): Township {\n    if (!input) {\n      return;\n    }\n    super.deserialize(input);\n    Object.assign(this, input);\n    return this;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { Branch } from 'models/branch';\nimport { Township } from 'models/township';\nimport { District } from 'models/district';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BranchService {\n  constructor(private _api: ApiService) {}\n\n  public getBranchList(opts?: any) {\n    return this._api.get(`branch`, opts).map((res) => {\n      res.data.branches = res.data.branches.map((item) => new Branch().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public getDistrictList(opts?: any) {\n    return this._api.get(`district`, opts).map((res) => {\n      res.data.districts = res.data.districts.map((item) => new District().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public getTownshipList(opts?: any) {\n    return this._api.get('township', opts).map((res) => {\n      res.data.townships = res.data.townships.map((item) => new Township().deserialize(item));\n\n      return res.data;\n    });\n  }\n}\n"],"sourceRoot":""}