{"version":3,"sources":["webpack:///./src/constants/customer-status.ts","webpack:///./src/constants/emitter.ts","webpack:///./src/shared/services/branch.service.ts","webpack:///./src/shared/services/customer-classification.service.ts","webpack:///./src/shared/services/customer-type.service.ts","webpack:///./src/shared/services/customer.service.ts"],"names":[],"mappings":"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","file":"cim-cim-module~customer-create-customer-create-module~customer-filter-customer-filter-module.545ae4e1c5b7137e89a8.js","sourcesContent":["export const CUSTOMER_STATUSES = [\n  {\n    value: 0,\n    name: 'Not Contacted',\n  },\n  {\n    value: 1,\n    name: 'Contacted',\n  },\n];\n","export const EMITTER_TYPE = {\n  FILTER_CUSTOMER: 'customer:filter',\n  CREATE_CUSTOMER: 'customer:create',\n  GMAP_CLICK: 'gmap:click',\n  CREATE_SALE_ACTIVITY: 'saleActivity:create',\n  FILTER_SALE_ACTIVITY: 'saleActivity:filter',\n  REMOVE_SALE_ACTIVITY: 'saleActivity:remove',\n  UPDATE_SALE_ACTIVITY: 'saleActivity:update',\n  FILTER_POLICY: 'policy:filter',\n  CREATE_POLICY: 'policy:create',\n  CREATE_BTS: 'bts:create',\n  FILTER_BTS: 'bts:filter',\n  GMAP_DISTANCE: 'gmap:distance',\n  GMAP_BTS: 'gmap:bts',\n  GMAP_BTS_CREATE: 'gmap:bts:create',\n  FILTER_CARE_ACTIVITY: 'careActivity:filter',\n  CREATE_CARE_ACTIVITY: 'careActivity:create',\n  CREATE_QUOTATION: 'quotation:create',\n  CHANGE_CUSTOMER_QUOTATION: 'quotation:changeCustomer',\n  FILTER_QUOTATION: 'quotation:filter',\n  FILTER_PROPOSAL: 'proposal:filter',\n  FILTER_DASHBOARD: 'dashboard:filter',\n  CREATE_USER: 'user:create',\n  CREATE_SALE_ACTIVITY_2: 'saleActivity2:create',\n  FILTER_SALE_ACTIVITY_2: 'saleActivity2:filter',\n  CHANGE_FOLDER: 'folder:change',\n  GMAP_PLACE_CHANGED: 'gmap:place:changed',\n  GMAP_ZOOM_TO: 'gmap:zoomTp',\n};\n","import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { Branch } from 'models/branch';\nimport { Township } from 'models/township';\nimport { District } from 'models/district';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BranchService {\n  constructor(private _api: ApiService) {}\n\n  public getBranchList(opts?: any) {\n    return this._api.get(`branch`, opts).map((res) => {\n      res.data.branches = res.data.branches.map((item) => new Branch().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public getDistrictList(opts?: any) {\n    return this._api.get(`district`, opts).map((res) => {\n      res.data.districts = res.data.districts.map((item) => new District().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public getTownshipList(opts?: any) {\n    return this._api.get('township', opts).map((res) => {\n      res.data.townships = res.data.townships.map((item) => new Township().deserialize(item));\n\n      return res.data;\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { CustomerClassification } from 'models/customer-classification';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerClassificationService {\n  constructor(private _api: ApiService) {}\n\n  public getCustomerClassification(params: any) {\n    return this._api.get(`customer-classifications`, params).map((res) => {\n      res.data.customerClassifications = res.data.customerClassifications.map((item) =>\n        new CustomerClassification().deserialize(item),\n      );\n      return res.data;\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { CustomerType } from 'models/customer-type';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerTypeService {\n  constructor(private _api: ApiService) {}\n\n  public customerTypes(params?: any) {\n    return this._api.get(`customer-types`, params).map((res) => {\n      res.data.customerTypes = res.data.customerTypes.map((item) => new CustomerType().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public customerTypesRead(params?: any) {\n    return this._api.get(`customers/read`, params).map((res) => {\n      const data: CustomerType[] = [];\n      if (res.data.typeOfCompanys) {\n        res.data.typeOfCompanys.forEach((item) => {\n          data.push(\n            new CustomerType().deserialize({\n              ...item,\n              child: { state: 'Type Of Companies' },\n            }),\n          );\n        });\n      }\n\n      if (res.data.typeOfGroups) {\n        res.data.typeOfGroups.forEach((item) => {\n          data.push(\n            new CustomerType().deserialize({\n              ...item,\n              child: { state: 'Type Of Groups' },\n            }),\n          );\n        });\n      }\n\n      return data;\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { Customer } from 'models/customer';\nimport { DownloadService } from './download.service';\nimport { RootScopeService } from 'app/services/root-scope.service';\nimport { Roles } from 'app/guard/roles';\nimport { RoleService } from 'app/role.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerService {\n  constructor(\n    private _api: ApiService,\n    private _download: DownloadService,\n    private _rootScope: RootScopeService,\n    private _role: RoleService,\n  ) {}\n\n  public customersList(params?: any) {\n    return this._api.get(`customers`, params).map((res) => {\n      res.data.customerList = res.data.customerList.map((item) => new Customer().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public showCustomer(id: number, opts?: any) {\n    return this._api.get(`customers/${id}`, opts).map((res) => {\n      if (res.data && res.data.customer) {\n        return new Customer().deserialize(res.data.customer);\n      }\n\n      return;\n    });\n  }\n\n  public filterListCustomers(opts: any = {}) {\n    const _opts: any = {\n      role: this._rootScope.currentUser.id ? this._rootScope.currentUser.role : Roles.MYTEL_ADMIN,\n    };\n\n    if (this._role.is_hq_sale_staff || this._role.is_branch_sale_staff) {\n      _opts.assignedStaffId = this._rootScope.currentUser.id ? this._rootScope.currentUser.id : 0;\n    }\n\n    return this._api.get(`customers/filters`, { ..._opts, ...opts }).map((res) => {\n      res.data.customerList = res.data.customerList.map((item) => new Customer().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public filterCustomers(opts: any = {}) {\n    const _opts: any = {\n      role: this._rootScope.currentUser.id ? this._rootScope.currentUser.role : Roles.MYTEL_ADMIN,\n    };\n\n    if (this._role.is_branch_director) {\n      _opts.branchId =\n        this._rootScope.currentUser.id && this._rootScope.currentUser.branchId\n          ? this._rootScope.currentUser.branchId\n          : 0;\n    }\n\n    if (this._role.is_hq_sale_staff || this._role.is_branch_sale_staff) {\n      _opts.assignedStaffId = this._rootScope.currentUser.id ? this._rootScope.currentUser.id : 0;\n    }\n\n    return this._api.get(`customers/filters`, { ..._opts, ...opts }).map((res) => {\n      res.data.customerList = res.data.customerList.map((item) => new Customer().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public createCustomer(data: any) {\n    return this._api.post(`customers`, data);\n  }\n\n  public updateCustomer(id: number, data: any) {\n    return this._api.put(`customers/${id}`, data);\n  }\n\n  public removeCustomer(id: number) {\n    return this._api.delete(`customers/${id}`);\n  }\n\n  public exportCustomer(opts: any = {}) {\n    const _opts: any = {\n      role: this._rootScope.currentUser.id ? this._rootScope.currentUser.role : Roles.MYTEL_ADMIN,\n    };\n\n    if (this._role.is_branch_director) {\n      _opts.branchId =\n        this._rootScope.currentUser.id && this._rootScope.currentUser.branchId\n          ? this._rootScope.currentUser.branchId\n          : 0;\n    }\n\n    if (this._role.is_hq_sale_staff || this._role.is_branch_sale_staff) {\n      _opts.assignedStaffId = this._rootScope.currentUser.id ? this._rootScope.currentUser.id : 0;\n    }\n\n    return this._download.get(`customers/export`, { ..._opts, ...opts });\n  }\n}\n"],"sourceRoot":""}