{"version":3,"sources":["webpack:///./src/app/timeline/timeline-event/timeline-event.component.html","webpack:///./src/app/timeline/timeline-event/timeline-event.component.scss","webpack:///./src/app/timeline/timeline-event/timeline-event.component.ts","webpack:///./src/app/timeline/timeline-event/timeline-event.module.ts","webpack:///./src/app/timeline/timeline-tree/timeline-tree.component.html","webpack:///./src/app/timeline/timeline-tree/timeline-tree.component.scss","webpack:///./src/app/timeline/timeline-tree/timeline-tree.component.ts","webpack:///./src/app/timeline/timeline-tree/timeline-tree.module.ts","webpack:///./src/models/sale-activity.ts","webpack:///./src/shared/services/branch.service.ts"],"names":[],"mappings":"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","file":"timeline-tree-timeline-tree-module.3776bda6afb7af225007.js","sourcesContent":["module.exports = \"\\n<div class=\\\"timeline-badge {{ event.statusOfProcessColor }}\\\"><i [ngClass]=\\\"event.statusOfProcessIcon\\\"></i></div>\\n<div class=\\\"timeline-panel\\\">\\n  <div class=\\\"timeline-heading\\\">\\n    <h4 class=\\\"timeline-title\\\">{{ event.statusOfProcessName }}</h4>\\n    <p><small class=\\\"text-muted\\\"><i class=\\\"fa fa-time\\\"></i> {{ event.dateDisplay }}</small></p>\\n  </div>\\n  <div class=\\\"timeline-body\\\">\\n    <p class=\\\"text--break\\\">{{ event.note }}</p>\\n    <p class=\\\"font-weight-bold font-italic\\\">by {{ event.staff_full_name }}</p>\\n  </div>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\nimport { SaleActivity } from 'models/sale-activity';\n\n@Component({\n  selector: 'app-timeline-event',\n  templateUrl: './timeline-event.component.html',\n  styleUrls: ['./timeline-event.component.scss'],\n})\nexport class TimelineEventComponent implements OnInit {\n  @Input('event')\n  public event: SaleActivity;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TimelineEventComponent } from './timeline-event.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TimelineEventComponent],\n  exports: [TimelineEventComponent],\n})\nexport class TimelineEventModule {}\n","module.exports = \"\\n\\n<form novalidate>\\n  <div class=\\\"row mb-4 customer-form-content\\\">\\n    <div class=\\\"col-lg-3 col-md-6 form-group\\\">\\n      <label>Customer</label>\\n      <ng-select\\n        [items]=\\\"customers | async\\\"\\n        class=\\\"text-left\\\"\\n        [closeOnSelect]=\\\"true\\\"\\n        [clearable]=\\\"true\\\"\\n        [loading]=\\\"isLoadingCusotmer\\\"\\n        placeholder=\\\"please select customer\\\"\\n        [searchable]=\\\"true\\\"\\n        name=\\\"customer\\\"\\n        [(ngModel)]=\\\"filterTerm.customer\\\"\\n        bindLabel=\\\"customerName\\\"\\n        [typeahead]=\\\"customerInput$\\\">\\n      </ng-select>\\n    </div>\\n\\n    <div class=\\\"col-lg-3 col-md-6\\\" *ngIf=\\\"roleAccess\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"Region\\\">Branch</label>\\n        <ng-select\\n          [items]=\\\"branches\\\"\\n          class=\\\"text-left\\\"\\n          [closeOnSelect]=\\\"true\\\"\\n          [clearable]=\\\"true\\\"\\n          [loading]=\\\"isLoadingBranch\\\"\\n          placeholder=\\\"please select region\\\"\\n          [searchable]=\\\"false\\\"\\n          name=\\\"branches\\\"\\n          [(ngModel)]=\\\"filterTerm.branchId\\\"\\n          #Region=\\\"ngModel\\\"\\n          bindLabel=\\\"name\\\"\\n          bindValue=\\\"id\\\">\\n        </ng-select>\\n      </div>\\n    </div>\\n\\n    <!-- <div class=\\\"col-lg-6 col-md-12 form-group\\\">\\n      <label for=\\\"Name\\\">Staff</label>\\n      <ng-select\\n        [items]=\\\"staffs\\\"\\n        class=\\\"text-left\\\"\\n        [closeOnSelect]=\\\"true\\\"\\n        [clearable]=\\\"true\\\"\\n        [loading]=\\\"isLoadingStaff\\\"\\n        placeholder=\\\"please select staff\\\"\\n        [searchable]=\\\"false\\\"\\n        name=\\\"staff\\\"\\n        [(ngModel)]=\\\"filterTerm.staff\\\"\\n        bindLabel=\\\"code_full_name\\\">\\n      </ng-select>\\n    </div> -->\\n\\n    <div class=\\\"col-lg-3 col-md-6 form-group\\\">\\n      <label for=\\\"FromDate\\\">From Date</label>\\n      <div class=\\\"input-group\\\">\\n        <input type=\\\"text\\\"\\n          name=\\\"dateFrom\\\"\\n          id=\\\"FromDate\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'border-right-0': filterTerm.dateFrom }\\\"\\n          readonly\\n          placeholder=\\\"please select date from\\\"\\n          bsDatepicker\\n          [(bsValue)]=\\\"filterTerm.dateFrom\\\"\\n          [bsConfig]=\\\"DATEPICKER_CONFIG\\\">\\n\\n        <div class=\\\"input-group-append\\\" *ngIf=\\\"filterTerm.dateFrom\\\">\\n          <span class=\\\"input-group-text bg--white\\\">\\b<i class=\\\"fa fa-times cursor-pointer\\\" (click)=\\\"filterTerm.dateFrom = null\\\"></i></span>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-3 col-md-6 form-group\\\">\\n      <label for=\\\"ToDate\\\">To Date</label>\\n      <div class=\\\"input-group\\\">\\n        <input type=\\\"text\\\" name=\\\"dateTo\\\" id=\\\"ToDate\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'border-right-0': filterTerm.dateTo }\\\"\\n          readonly\\n          placeholder=\\\"please select date to\\\"\\n          bsDatepicker\\n          [(bsValue)]=\\\"filterTerm.dateTo\\\"\\n          [bsConfig]=\\\"DATEPICKER_CONFIG\\\">\\n\\n        <div class=\\\"input-group-append\\\" *ngIf=\\\"filterTerm.dateTo\\\">\\n          <span class=\\\"input-group-text bg--white\\\">\\b<i class=\\\"fa fa-times cursor-pointer\\\" (click)=\\\"filterTerm.dateTo = null\\\"></i></span>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\"\\n          [disabled]=\\\"isLoading\\\"\\n          (click)=\\\"filterSaleActivities()\\\">\\n          <i class=\\\"fa fa-search mr-2\\\"></i>\\n          Filter\\n        </button>\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n\\n<ul class=\\\"timeline\\\" *ngIf=\\\"saleActivities.length > 0\\\" [hidden]=\\\"!filterTerm.customer || !filterTerm.customer.id\\\">\\n  <li *ngFor=\\\"let event of saleActivities;\\\">\\n    <app-timeline-event [event]=\\\"event\\\"></app-timeline-event>\\n  </li>\\n</ul>\\n\\n<button type=\\\"button\\\"\\n  class=\\\"btn btn-primary\\\" [disabled]=\\\"!filterTerm.customer || !filterTerm.customer.id\\\"\\n  (click)=\\\"addActivity()\\\">Add Activity</button>\\n\"","module.exports = \"\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { SaleActivity } from 'models/sale-activity';\nimport { Observable } from 'rxjs/Observable';\nimport { Customer } from 'models/customer';\nimport { of } from 'rxjs/internal/observable/of';\nimport { concat } from 'rxjs/internal/observable/concat';\nimport { debounceTime } from 'rxjs/internal/operators/debounceTime';\nimport { distinctUntilChanged } from 'rxjs/internal/operators/distinctUntilChanged';\nimport { tap } from 'rxjs/internal/operators/tap';\nimport { switchMap } from 'rxjs/internal/operators/switchMap';\nimport { catchError } from 'rxjs/internal/operators/catchError';\nimport { CustomerService } from 'shared/services/customer.service';\nimport { Subject } from 'rxjs/Subject';\nimport { User } from 'models/user';\nimport { NotifyService } from 'shared/utils/notify.service';\nimport { UserService } from 'shared/services/user.service';\nimport { SaleActivityService } from 'shared/services/sale-activity.service';\nimport * as moment from 'moment';\nimport { DATEPICKER_CONFIG } from 'constants/datepicker-config';\nimport { EventEmitterService } from 'shared/utils/event-emitter.service';\nimport { EMITTER_TYPE } from 'constants/emitter';\nimport { Router } from '@angular/router';\nimport { Branch } from 'models/branch';\nimport { RoleService } from 'app/role.service';\nimport { BranchService } from 'shared/services/branch.service';\n\n@Component({\n  selector: 'app-timeline-tree',\n  templateUrl: './timeline-tree.component.html',\n  styleUrls: ['./timeline-tree.component.scss'],\n})\nexport class TimelineTreeComponent implements OnInit, OnDestroy {\n  public customers: Observable<Customer[]> = of([]);\n  public customerInput$ = new Subject<string>();\n  public isLoadingCusotmer = false;\n\n  // public staffs: User[] = [];\n  // public isLoadingStaff = false;\n\n  public DATEPICKER_CONFIG = DATEPICKER_CONFIG;\n  public isLoading = false;\n\n  // branches\n  public branches: Branch[] = [];\n  public isLoadingBranch = false;\n\n  public filterTerm: any = {\n    customer: null,\n    // staff: null,\n    dateFrom: null,\n    dateTo: null,\n    branchId: null,\n  };\n\n  public get isEndAfterFrom(): boolean {\n    return (\n      !!this.filterTerm.dateFrom &&\n      !!this.filterTerm.dateTo &&\n      moment(this.filterTerm.dateTo).isBefore(moment(this.filterTerm.dateFrom))\n    );\n  }\n\n  public get filterTermToJSON(): any {\n    const opts: any = {};\n\n    if (this.filterTerm.customer) {\n      opts.customerId = this.filterTerm.customer.id;\n    }\n    // if (this.filterTerm.staff) {\n    //   opts.staffId = this.filterTerm.staff.id;\n    // }\n    if (this.filterTerm.dateFrom) {\n      opts.dateFrom = moment(this.filterTerm.dateFrom).format('YYYY-MM-DD');\n    }\n    if (this.filterTerm.dateTo) {\n      opts.dateTo = moment(this.filterTerm.dateTo).format('YYYY-MM-DD');\n    }\n\n    if (this.filterTerm.branchId) {\n      opts.branchId = this.filterTerm.branchId;\n    }\n\n    return opts;\n  }\n\n  public saleActivities: SaleActivity[] = [];\n\n  get roleAccess(): boolean {\n    return this.role.is_admin || this.role.is_sale_director;\n  }\n\n  constructor(\n    private _customerSv: CustomerService,\n    private _userSv: UserService,\n    private _notify: NotifyService,\n    private _saleActivitySv: SaleActivityService,\n    private _emitter: EventEmitterService,\n    private _router: Router,\n    public role: RoleService,\n    private _branchSv: BranchService,\n  ) {}\n\n  ngOnInit() {\n    this._initSearchCustomers();\n    // this._getStaffs();\n    this._getBranchList();\n  }\n\n  ngOnDestroy() {\n    this._emitter.publishData({\n      type: EMITTER_TYPE.FILTER_SALE_ACTIVITY_2,\n      params: {},\n    });\n  }\n\n  private _getBranchList() {\n    if (this.roleAccess) {\n      this.isLoadingBranch = true;\n      this._branchSv.getBranchList().subscribe(\n        (res) => {\n          this.branches = res.branches;\n          this.isLoadingBranch = false;\n        },\n        (errors) => {\n          this.isLoadingBranch = false;\n          this._notify.error(errors);\n        },\n      );\n    }\n  }\n\n  private _initSearchCustomers() {\n    this._customerSv\n      .filterCustomers({\n        page: 0,\n        size: 100,\n        sort: 'asc',\n        column: 'id',\n      })\n      .subscribe((res) => {\n        this._searchCustomers(res.customerList);\n      });\n  }\n\n  private _searchCustomers(customers: Customer[]) {\n    this.customers = concat(\n      of(customers), // default items\n      this.customerInput$.pipe(\n        debounceTime(200),\n        distinctUntilChanged(),\n        tap(() => (this.isLoadingCusotmer = true)),\n        switchMap((term) =>\n          this._customerSv\n            .filterCustomers({\n              page: 0,\n              size: 100,\n              sort: 'asc',\n              column: 'id',\n              txtSearch: term || '',\n            })\n            .map((res) => res.customerList)\n            .pipe(\n              catchError(() => of([])), // empty list on error\n              tap(() => (this.isLoadingCusotmer = false)),\n            ),\n        ),\n      ),\n    );\n  }\n\n  // private _getStaffs() {\n  //   this.isLoadingStaff = true;\n\n  //   this._userSv.getAllUsers().subscribe(\n  //     (res) => {\n  //       this.staffs = res;\n  //       this.isLoadingStaff = false;\n  //     },\n  //     (errors) => {\n  //       this.isLoadingStaff = false;\n  //       this._notify.error(errors);\n  //     },\n  //   );\n  // }\n\n  public filterSaleActivities() {\n    if (this.isEndAfterFrom) {\n      this._notify.warning('Please select the end time after the start time');\n      return;\n    }\n\n    this._emitter.publishData({\n      type: EMITTER_TYPE.FILTER_SALE_ACTIVITY_2,\n      params: this.filterTermToJSON,\n    });\n\n    if (!this.filterTerm.customer || !this.filterTerm.customer.id) {\n      this.saleActivities = [];\n      return;\n    }\n\n    const opts: any = {\n      ...this.filterTermToJSON,\n      page: 0,\n      size: 1000,\n      sort: 'desc',\n      column: 'saleDate',\n    };\n    this.isLoading = true;\n\n    this._saleActivitySv.getSaleActivitiesList(opts).subscribe(\n      (res) => {\n        if (res.list.length === 0) {\n          this._notify.info('data not found');\n        }\n        this.saleActivities = res.list;\n        this.isLoading = false;\n\n        setTimeout(() => {\n          $('.timeline-panel').click(function() {\n            $('.timeline-body', this).toggle(); // p00f\n          });\n        }, 0);\n      },\n      (errors) => {\n        this.isLoading = false;\n        this._notify.error(errors);\n      },\n    );\n  }\n\n  public addActivity() {\n    if (!this.filterTerm.customer || !this.filterTerm.customer.id) {\n      return;\n    }\n\n    this._router.navigate(['/cim/timeline/create'], {\n      queryParams: {\n        customerId: this.filterTerm.customer.id,\n      },\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TimelineTreeComponent } from './timeline-tree.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TimelineEventModule } from '../timeline-event/timeline-event.module';\nimport { UserService } from 'shared/services/user.service';\nimport { CustomerService } from 'shared/services/customer.service';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormsModule } from '@angular/forms';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { BranchService } from 'shared/services/branch.service';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TimelineTreeComponent,\n  },\n];\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    BsDatepickerModule.forRoot(),\n    TimelineEventModule,\n    NgSelectModule,\n    NgSelectModule,\n    FormsModule,\n  ],\n  declarations: [TimelineTreeComponent],\n  providers: [UserService, CustomerService, BranchService],\n})\nexport class TimelineTreeModule {}\n","import { Customer } from './customer';\nimport { User } from './user';\nimport { CustomerClassification } from './customer-classification';\n\nimport * as moment from 'moment';\nimport { BaseModelInterface, BaseModel } from './base.model';\nimport { Deserializable } from 'shared/interfaces/deserializable';\n\nexport enum StatusOfProcess {\n  SENT_MAIL = 'Sent Mail',\n  CALL = 'Call',\n  MEETING_WITH_CUSTOMER = 'Meeting with customer',\n  MADE_AND_SEND_QUOTATION = 'Made and sent quotation',\n  NEGOTIATION = 'Negotiation',\n  SIGNED_CONTRACT = 'Signed contract',\n}\n\ninterface SaleActivityInterface extends BaseModelInterface {\n  statusOfProcess: CustomerClassification;\n  note: string;\n  dateBinding: Date;\n  saleDate: any;\n  customerId: number;\n  customer: Customer;\n  assignedStaffId: number;\n  assignedStaff: User;\n}\nexport class SaleActivity extends BaseModel implements Deserializable<SaleActivity> {\n  customerId: number;\n  customer: Customer;\n  public get customer_name(): string {\n    return this.customer ? this.customer.customerName : '';\n  }\n\n  assignedStaffId: number;\n  assignedStaff: User;\n  public get staff_user_name(): string {\n    return this.assignedStaff ? this.assignedStaff.userName : '';\n  }\n  public get staff_full_name(): string {\n    return this.assignedStaff ? this.assignedStaff.fullName : '';\n  }\n\n  statusOfProcess: CustomerClassification;\n  public get statusOfProcessName(): string {\n    return this.statusOfProcess ? this.statusOfProcess.name : '';\n  }\n  public get statusOfProcessIcon(): string {\n    if (!this.statusOfProcess || !this.statusOfProcess.name) {\n      return;\n    }\n\n    switch (this.statusOfProcess.name) {\n      case StatusOfProcess.CALL:\n        return `fa fa-phone-square`;\n      case StatusOfProcess.MADE_AND_SEND_QUOTATION:\n        return `fa fa-th-list`;\n      case StatusOfProcess.MEETING_WITH_CUSTOMER:\n        return `fa fa-comments`;\n      case StatusOfProcess.NEGOTIATION:\n        return `fa fa-thumbs-up`;\n      case StatusOfProcess.SENT_MAIL:\n        return `fa fa-envelope`;\n      case StatusOfProcess.SIGNED_CONTRACT:\n        return `fa fa-check-square`;\n    }\n  }\n  public get statusOfProcessColor(): string {\n    if (!this.statusOfProcess || !this.statusOfProcess.name) {\n      return;\n    }\n\n    switch (this.statusOfProcess.name) {\n      case StatusOfProcess.CALL:\n        return `primary`;\n      case StatusOfProcess.MADE_AND_SEND_QUOTATION:\n        return `success`;\n      case StatusOfProcess.MEETING_WITH_CUSTOMER:\n        return `warning`;\n      case StatusOfProcess.NEGOTIATION:\n        return `danger`;\n      case StatusOfProcess.SENT_MAIL:\n        return `info`;\n      case StatusOfProcess.SIGNED_CONTRACT:\n        return `info`;\n    }\n  }\n\n  note: string;\n\n  saleDate: any;\n  public get date_str(): string {\n    return moment(this.saleDate).toISOString();\n  }\n  public get dateDisplay(): string {\n    return moment(this.saleDate).format('YYYY-MM-DD');\n  }\n\n  dateBinding: Date;\n\n  constructor() {\n    super();\n    this.dateBinding = new Date();\n  }\n\n  deserialize(input: Partial<SaleActivityInterface>): SaleActivity {\n    if (!input) {\n      return;\n    }\n\n    super.deserialize(input);\n    Object.assign(this, input);\n\n    this.dateBinding = input.saleDate instanceof Date ? input.saleDate : new Date(input.saleDate);\n\n    this.customer = input.customer instanceof Customer ? input.customer : new Customer().deserialize(input.customer);\n\n    this.assignedStaff =\n      input.assignedStaff instanceof User ? input.assignedStaff : new User().deserialize(input.assignedStaff);\n\n    this.statusOfProcess =\n      input.statusOfProcess instanceof CustomerClassification\n        ? input.statusOfProcess\n        : new CustomerClassification().deserialize(input.statusOfProcess);\n\n    return this;\n  }\n\n  public toJSON() {\n    return {\n      customerId: this.customer ? this.customer.id : null,\n      assignedStaffId: this.assignedStaff ? this.assignedStaff.id : null,\n      statusOfProcessId: this.statusOfProcess ? this.statusOfProcess.id : null,\n      note: this.note || null,\n      saleDate: this.date_str,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { Branch } from 'models/branch';\nimport { Township } from 'models/township';\nimport { District } from 'models/district';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BranchService {\n  constructor(private _api: ApiService) {}\n\n  public getBranchList(opts?: any) {\n    return this._api.get(`branch`, opts).map((res) => {\n      res.data.branches = res.data.branches.map((item) => new Branch().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public getDistrictList(opts?: any) {\n    return this._api.get(`district`, opts).map((res) => {\n      res.data.districts = res.data.districts.map((item) => new District().deserialize(item));\n      return res.data;\n    });\n  }\n\n  public getTownshipList(opts?: any) {\n    return this._api.get('township', opts).map((res) => {\n      res.data.townships = res.data.townships.map((item) => new Township().deserialize(item));\n\n      return res.data;\n    });\n  }\n}\n"],"sourceRoot":""}