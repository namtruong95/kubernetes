{"version":3,"sources":["webpack:///./src/app/ssm/policy/policy-create/policy-create.component.html","webpack:///./src/app/ssm/policy/policy-create/policy-create.component.scss","webpack:///./src/app/ssm/policy/policy-create/policy-create.component.ts","webpack:///./src/app/ssm/policy/policy-create/policy-create.module.ts","webpack:///./src/constants/emitter.ts","webpack:///./src/models/customer-classification.ts","webpack:///./src/shared/validators/numberic-validator/numberic-validator.directive.ts","webpack:///./src/shared/validators/numberic-validator/numberic-validator.module.ts"],"names":[],"mappings":"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","file":"policy-create-policy-create-module.f54ee0a93624bc989825.js","sourcesContent":["module.exports = \"<form #Policy=\\\"ngForm\\\" novalidate>\\n  <div class=\\\"row mb-4 customer-form-content\\\">\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"policyName\\\">Policy Name <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <input type=\\\"text\\\" id=\\\"policyName\\\"\\n          autocomplete=\\\"new-policyName\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': PolicyName.dirty && PolicyName.errors }\\\"\\n          name=\\\"policyName\\\"\\n          #PolicyName=\\\"ngModel\\\"\\n          required\\n          placeholder=\\\"please enter policy name\\\"\\n          [(ngModel)]=\\\"policy.policyName\\\">\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"PolicyName.errors?.required\\\">\\n          Please enter policy name\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"serviceTerm\\\">Type Of Service <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <ng-select\\n          [items]=\\\"serviceTerms\\\"\\n          class=\\\"text-left\\\"\\n          [closeOnSelect]=\\\"true\\\"\\n          [clearable]=\\\"true\\\"\\n          [loading]=\\\"isLoadingServiceTerm\\\"\\n          placeholder=\\\"please select type of service\\\"\\n          [searchable]=\\\"false\\\"\\n          name=\\\"serviceTerm\\\"\\n          #ServiceTerm=\\\"ngModel\\\"\\n          required\\n          [(ngModel)]=\\\"policy.serviceTerm\\\"\\n          bindLabel=\\\"name\\\">\\n        </ng-select>\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"ServiceTerm.errors?.required\\\">\\n          Please select type of service\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"bandWidth\\\">Bandwidth (Mbps)</label>\\n        <input type=\\\"text\\\" id=\\\"bandWidth\\\"\\n          autocomplete=\\\"new-bandWidth\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': BandWidth.dirty && BandWidth.errors }\\\"\\n          name=\\\"bandWidth\\\"\\n          appNumbericValidator\\n          min=\\\"1\\\"\\n          placeholder=\\\"please enter bandwidth\\\"\\n          [(ngModel)]=\\\"policy.bandWidth\\\"\\n          #BandWidth=\\\"ngModel\\\">\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"BandWidth.dirty && BandWidth.errors?.appNumbericValidator\\\">Please enter a bandwidth greater than 0</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"typeOfService\\\">Service Term <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <ng-select\\n          [items]=\\\"typeOfServices\\\"\\n          class=\\\"text-left\\\"\\n          [closeOnSelect]=\\\"true\\\"\\n          [clearable]=\\\"true\\\"\\n          [loading]=\\\"isLoadingTypeOfService\\\"\\n          placeholder=\\\"please select service term\\\"\\n          [searchable]=\\\"false\\\"\\n          name=\\\"typeOfServices\\\"\\n          #TypeOfService=\\\"ngModel\\\"\\n          required\\n          [(ngModel)]=\\\"policy.typeOfService\\\"\\n          bindLabel=\\\"name\\\">\\n        </ng-select>\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"TypeOfService.errors?.required\\\">\\n          Please select service term\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"minDistance\\\">Min Distance (km)</label>\\n        <input type=\\\"text\\\" id=\\\"minDistance\\\"\\n          autocomplete=\\\"new-minDistance\\\"\\n          class=\\\"form-control\\\"\\n          name=\\\"minDistance\\\"\\n          appNumbericValidator\\n          placeholder=\\\"please enter min distance\\\"\\n          [(ngModel)]=\\\"policy.minDistance\\\">\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"maxDistance\\\">Max Distance (km)</label>\\n        <input type=\\\"text\\\" id=\\\"maxDistance\\\"\\n          autocomplete=\\\"new-maxDistance\\\"\\n          class=\\\"form-control\\\"\\n          name=\\\"maxDistance\\\"\\n          appNumbericValidator\\n          placeholder=\\\"please enter max distance\\\"\\n          [(ngModel)]=\\\"policy.maxDistance\\\">\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"otc\\\">OTC (MMK) <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <input type=\\\"text\\\" id=\\\"otc\\\"\\n          autocomplete=\\\"new-otc\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': Otc.dirty && Otc.errors }\\\"\\n          name=\\\"otc\\\"\\n          #Otc=\\\"ngModel\\\"\\n          required\\n          #OTC\\n          placeholder=\\\"please enter OTC\\\"\\n          [ngModel]=\\\"policy.otc\\\"\\n          (ngModelChange)=\\\"changeOtc()\\\">\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"Otc.errors?.required\\\">\\n          Please enter otc\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"mrcMin\\\">MRC Min (MMK) <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <input type=\\\"text\\\" id=\\\"mrcMin\\\"\\n          autocomplete=\\\"new-mrcMin\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': MrcMin.dirty && MrcMin.errors }\\\"\\n          name=\\\"mrcMin\\\"\\n          #MrcMin=\\\"ngModel\\\"\\n          required\\n          #MRCMin\\n          placeholder=\\\"please enter MRC Min\\\"\\n          [ngModel]=\\\"policy.mrcMin\\\"\\n          (ngModelChange)=\\\"changeMRCMin()\\\">\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"MrcMin.errors?.required\\\">\\n          Please enter min MRC\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"mrcMax\\\">MRC Max (MMK) <i class=\\\"required\\\">&#40;*&#41;</i></label>\\n        <input type=\\\"text\\\" id=\\\"mrcMax\\\"\\n          autocomplete=\\\"new-mrcMax\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': MrcMax.dirty && MrcMax.errors }\\\"\\n          name=\\\"mrcMax\\\"\\n          #MrcMax=\\\"ngModel\\\"\\n          required\\n          #MRCMax\\n          placeholder=\\\"please enter MRC Max\\\"\\n          [ngModel]=\\\"policy.mrcMax\\\"\\n          (ngModelChange)=\\\"changeMRCMax()\\\">\\n\\n        <div class=\\\"invalid-feedback\\\"\\n          *ngIf=\\\"MrcMax.errors?.required\\\">\\n          Please enter max MRC\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-6 col-md-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"File\\\">Policy PDF </label>\\n        <ng-select\\n          [items]=\\\"files\\\"\\n          class=\\\"text-left\\\"\\n          [closeOnSelect]=\\\"true\\\"\\n          [clearable]=\\\"true\\\"\\n          [loading]=\\\"isLoadingPolicy\\\"\\n          placeholder=\\\"please select policy pdf\\\"\\n          [searchable]=\\\"true\\\"\\n          name=\\\"file\\\"\\n          [(ngModel)]=\\\"policy.file\\\"\\n          bindLabel=\\\"folder_record_id\\\">\\n        </ng-select>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\"\\n      (click)=\\\"createPolicy(Policy)\\\"\\n      [disabled]=\\\"isLoading || Policy.form.invalid\\\">\\n      Create\\n      <i *ngIf=\\\"isLoading\\\" class=\\\"fa fa-refresh fa-spin\\\"></i>\\n    </button>\\n  </div>\\n</form>\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Policy } from 'models/policy';\nimport { PolicyService } from 'shared/services/policy.service';\nimport { NotifyService } from 'shared/utils/notify.service';\nimport { EMITTER_TYPE } from 'constants/emitter';\nimport { EventEmitterService } from 'shared/utils/event-emitter.service';\nimport { CustomerClassification } from 'models/customer-classification';\nimport { RegExp } from 'constants/reg-exp';\nimport { CustomerClassificationService } from 'shared/services/customer-classification.service';\nimport { NgForm } from '@angular/forms';\nimport { ManageFileService } from 'shared/services/manage-file.service';\nimport { ManagePdf } from 'models/manage-pdf';\n\n@Component({\n  selector: 'app-policy-create',\n  templateUrl: './policy-create.component.html',\n  styleUrls: ['./policy-create.component.scss'],\n})\nexport class PolicyCreateComponent implements OnInit {\n  @ViewChild('OTC')\n  OTC: ElementRef;\n  @ViewChild('MRCMin')\n  MRCMin: ElementRef;\n  @ViewChild('MRCMax')\n  MRCMax: ElementRef;\n\n  public policy: Policy = new Policy();\n\n  public isLoading = false;\n\n  // type of serivice\n  public isLoadingTypeOfService = false;\n  public typeOfServices: CustomerClassification[] = [];\n\n  // service term\n  public isLoadingServiceTerm = false;\n  public serviceTerms: CustomerClassification[] = [];\n\n  // policy PDF\n  public files: ManagePdf[] = [];\n  public isLoadingPolicy = false;\n\n  constructor(\n    private _policySv: PolicyService,\n    private _notify: NotifyService,\n    private _emitter: EventEmitterService,\n    private _customerClassificationSv: CustomerClassificationService,\n    private _manageFileSv: ManageFileService,\n  ) {}\n\n  ngOnInit() {\n    this.policy.serviceTerm = null;\n    this.policy.typeOfService = null;\n    this._getTypeOfServices();\n    this._getServicesterm();\n    this._getFiles();\n  }\n\n  private _getFiles() {\n    const opts = {\n      page: 0,\n      size: 1000,\n      sort: 'desc',\n      column: 'id',\n    };\n    this.isLoadingPolicy = true;\n    this._manageFileSv.getAllFiles(opts).subscribe(\n      (res) => {\n        this.files = res;\n        this.isLoadingPolicy = false;\n      },\n      (errors) => {\n        this.isLoadingPolicy = false;\n        this._notify.error(errors);\n      },\n    );\n  }\n\n  public createPolicy(form: NgForm) {\n    if (this.policy.bandWidth <= 0) {\n      this._notify.warning('Please enter a bandwidth greater than 0');\n      return;\n    }\n\n    if (this.policy.minDistance > this.policy.maxDistance) {\n      this._notify.warning('Please enter max distance greater than min distance');\n      return;\n    }\n\n    if (this.policy.mrcMin.toNumber() > this.policy.mrcMax.toNumber()) {\n      this._notify.warning('Please enter MRC max greater than MRC min');\n      return;\n    }\n\n    this.isLoading = true;\n\n    this._policySv.createPolicy(this.policy.toJSON()).subscribe(\n      (res) => {\n        this.isLoading = false;\n        this._notify.success('create policy success');\n        this._emitter.publishData({\n          type: EMITTER_TYPE.CREATE_POLICY,\n        });\n        form.form.markAsPristine({ onlySelf: false });\n      },\n      (errors) => {\n        this.isLoading = false;\n        this._notify.error(errors);\n      },\n      () => {\n        setTimeout(() => {\n          this.policy = new Policy();\n          this.policy.serviceTerm = null;\n          this.policy.typeOfService = null;\n        }, 0);\n      },\n    );\n  }\n\n  private _getTypeOfServices() {\n    this.isLoadingTypeOfService = true;\n\n    const params = {\n      type: 'service-term',\n    };\n    this.typeOfServices = [];\n\n    this._customerClassificationSv.getCustomerClassification(params).subscribe(\n      (res) => {\n        this.isLoadingTypeOfService = false;\n        this.typeOfServices = res.customerClassifications;\n      },\n      (errors) => {\n        this.isLoadingTypeOfService = false;\n        this._notify.error(errors);\n      },\n    );\n  }\n\n  private _getServicesterm() {\n    this.isLoadingServiceTerm = true;\n\n    const params = {\n      type: 'service',\n    };\n    this.serviceTerms = [];\n\n    this._customerClassificationSv.getCustomerClassification(params).subscribe(\n      (res) => {\n        this.isLoadingServiceTerm = false;\n        this.serviceTerms = res.customerClassifications;\n      },\n      (errors) => {\n        this.isLoadingServiceTerm = false;\n        this._notify.error(errors);\n      },\n    );\n  }\n\n  public changeOtc() {\n    if (\n      isNaN(this.OTC.nativeElement.value.toNumber()) ||\n      this.OTC.nativeElement.value.toNumber() < 0 ||\n      this.OTC.nativeElement.value.toNumber() > 5000000\n    ) {\n      this.OTC.nativeElement.value = this.policy.otc;\n      return;\n    }\n    this.policy.otc = this.OTC.nativeElement.value.toNumber().format();\n  }\n\n  public changeMRCMin() {\n    if (\n      isNaN(this.MRCMin.nativeElement.value.toNumber()) ||\n      this.MRCMin.nativeElement.value.toNumber() < 0 ||\n      this.MRCMin.nativeElement.value.toNumber() > 150000000\n    ) {\n      this.MRCMin.nativeElement.value = this.policy.mrcMin;\n      return;\n    }\n    this.policy.mrcMin = this.MRCMin.nativeElement.value.toNumber().format();\n  }\n\n  public changeMRCMax() {\n    if (\n      isNaN(this.MRCMax.nativeElement.value.toNumber()) ||\n      this.MRCMax.nativeElement.value.toNumber() < 0 ||\n      this.MRCMax.nativeElement.value.toNumber() > 150000000\n    ) {\n      this.MRCMax.nativeElement.value = this.policy.mrcMax;\n      return;\n    }\n    this.policy.mrcMax = this.MRCMax.nativeElement.value.toNumber().format();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PolicyCreateComponent } from './policy-create.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { CustomerClassificationService } from 'shared/services/customer-classification.service';\nimport { NumbericValidatorModule } from 'shared/validators/numberic-validator/numberic-validator.module';\nimport { ManageFileService } from 'shared/services/manage-file.service';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PolicyCreateComponent,\n  },\n];\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes), FormsModule, NgSelectModule, NumbericValidatorModule],\n  declarations: [PolicyCreateComponent],\n  providers: [CustomerClassificationService, ManageFileService],\n})\nexport class PolicyCreateModule {}\n","export const EMITTER_TYPE = {\n  FILTER_CUSTOMER: 'customer:filter',\n  CREATE_CUSTOMER: 'customer:create',\n  GMAP_CLICK: 'gmap:click',\n  CREATE_SALE_ACTIVITY: 'saleActivity:create',\n  FILTER_SALE_ACTIVITY: 'saleActivity:filter',\n  REMOVE_SALE_ACTIVITY: 'saleActivity:remove',\n  UPDATE_SALE_ACTIVITY: 'saleActivity:update',\n  FILTER_POLICY: 'policy:filter',\n  CREATE_POLICY: 'policy:create',\n  CREATE_BTS: 'bts:create',\n  FILTER_BTS: 'bts:filter',\n  GMAP_DISTANCE: 'gmap:distance',\n  GMAP_BTS: 'gmap:bts',\n  GMAP_BTS_CREATE: 'gmap:bts:create',\n  FILTER_CARE_ACTIVITY: 'careActivity:filter',\n  CREATE_CARE_ACTIVITY: 'careActivity:create',\n  CREATE_QUOTATION: 'quotation:create',\n  CHANGE_CUSTOMER_QUOTATION: 'quotation:changeCustomer',\n  FILTER_QUOTATION: 'quotation:filter',\n  FILTER_PROPOSAL: 'proposal:filter',\n  FILTER_DASHBOARD: 'dashboard:filter',\n  CREATE_USER: 'user:create',\n  CREATE_SALE_ACTIVITY_2: 'saleActivity2:create',\n  FILTER_SALE_ACTIVITY_2: 'saleActivity2:filter',\n  CHANGE_FOLDER: 'folder:change',\n  GMAP_PLACE_CHANGED: 'gmap:place:changed',\n  GMAP_ZOOM_TO: 'gmap:zoomTp',\n};\n","import { BaseModelInterface, BaseModel } from './base.model';\nimport { Deserializable } from 'shared/interfaces/deserializable';\n\ninterface CustomerClassificationInterface extends BaseModelInterface {\n  name: string;\n  type: string;\n}\nexport class CustomerClassification extends BaseModel implements Deserializable<CustomerClassification> {\n  private _name: string;\n  public get name(): string {\n    return this._name || '';\n  }\n  public set name(v: string) {\n    this._name = v;\n  }\n\n  type: string;\n\n  constructor() {\n    super();\n  }\n\n  deserialize(input: Partial<CustomerClassificationInterface>): CustomerClassification {\n    if (!input) {\n      return;\n    }\n    super.deserialize(input);\n    Object.assign(this, input);\n    return this;\n  }\n}\n","import { Directive, forwardRef, Attribute, HostListener, ElementRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\n@Directive({\n  selector:\n    '[appNumbericValidator][formControlName],[appNumbericValidator][formControl],[appNumbericValidator][ngModel]',\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => NumbericValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class NumbericValidatorDirective implements Validator {\n  private isSelectAll = false;\n  private regexNumeric = /^[0-9]+([\\.]?[0-9]+)?$/;\n\n  constructor(@Attribute('min') private min: number, @Attribute('max') private max: number, private el: ElementRef) {}\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event) {\n    const e = <KeyboardEvent>event;\n\n    if (\n      [46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 ||\n      // Allow: Ctrl+A\n      (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||\n      // Allow: Ctrl+C\n      (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||\n      // Allow: Ctrl+V\n      (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||\n      // Allow: Ctrl+X\n      (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||\n      // Allow: home, end, left, right\n      (e.keyCode >= 35 && e.keyCode <= 39)\n    ) {\n      return;\n    }\n\n    const value: string = this.isSelectAll ? e.key : this.el.nativeElement.value + e.key;\n\n    if (\n      this.regexNumeric.test(value) ||\n      (e.key === '.' && value.length >= 2 && (value.match(/\\./g) || []).length <= 1)\n    ) {\n      this.isSelectAll = false;\n      return;\n    }\n\n    e.preventDefault();\n  }\n\n  @HostListener('select')\n  onselect() {\n    this.isSelectAll = true;\n  }\n  @HostListener('click')\n  onclick() {\n    this.isSelectAll = false;\n  }\n  @HostListener('blur')\n  onblur() {\n    this.isSelectAll = false;\n  }\n\n  validate(c: AbstractControl): { [key: string]: any } {\n    const value = c.value;\n\n    if (\n      (value !== null || value !== undefined) &&\n      (isNaN(value) || (this.min && value < +this.min) || (this.max && value > +this.max))\n    ) {\n      return { appNumbericValidator: true };\n    }\n\n    return null;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NumbericValidatorDirective } from './numberic-validator.directive';\n\n@NgModule({\n  declarations: [NumbericValidatorDirective],\n  exports: [NumbericValidatorDirective],\n})\nexport class NumbericValidatorModule {}\n"],"sourceRoot":""}